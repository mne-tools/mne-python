trigger:
  # start a new build for every push
  batch: False
  branches:
    include:
      - 'main'
      - 'maint/*'
pr:
  branches:
    include:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string


stages:

- stage: Check
  jobs:
    - job: Skip
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        DECODE_PERCENTS: 'false'
        RET: 'true'
        BUILD_REASON: $(Build.Reason)
      steps:
      - bash: |
          git_log=`git log --format=oneline -n 1 --skip=1`
          echo "##vso[task.setvariable variable=log]$git_log"
      - bash: echo "##vso[task.setvariable variable=RET]false"
        condition: and(eq(variables.BUILD_REASON, 'PullRequest'), or(contains(variables.log, '[skip azp]'), contains(variables.log, '[azp skip]'), contains(variables.log, '[skip ci]'), contains(variables.log, '[ci skip]')))
      - bash: echo "##vso[task.setvariable variable=start_main;isOutput=true]$RET"
        name: result

- stage: Style
  variables:
    AZURE_CI: 'true'
  jobs:
  - job: All
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      PYTHON_VERSION: '3.9'
      PYTHON_ARCH: 'x64'
    steps:
    - bash: echo $(COMMIT_MSG)
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
        architecture: $(PYTHON_ARCH)
        addToPath: true
      displayName: 'Get Python'
    - bash: |
        set -e
        python -m pip install --progress-bar off --upgrade pip setuptools wheel
        python -m pip install --progress-bar off -r requirements_base.txt -r requirements_hdf5.txt -r requirements_testing.txt
      displayName: Install dependencies
    - bash: |
        make flake
      displayName: make flake
    - bash: |
        make codespell-error
      displayName: make codespell
    - bash: |
        make pydocstyle
      displayName: make pydocstyle
      condition: always()
    - bash: |
        make docstring
      displayName: make docstring
      condition: always()
    - bash: |
        make nesting
      displayName: make nesting
      condition: always()
    - bash: |
        make check-manifest
      displayName: make check-manifest
      condition: always()
    - bash: |
        make check-readme
      displayName: make check-readme
      condition: always()

- stage: Test
  condition: and(succeeded(), eq(dependencies.Check.outputs['Skip.result.start_main'], 'true'))
  dependsOn: ['Style', 'Check']
  variables:
    AZURE_CI: 'true'
  jobs:
  - job: SphinxWindows
    pool:
      vmImage: 'windows-latest'
    variables:
      AZURE_CI_WINDOWS: 'true'
    steps:
    - bash: |
        set -e
        git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
        powershell gl-ci-helpers/appveyor/install_opengl.ps1
      displayName: Install OpenGL
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'
    - script: pip install -e .
      displayName: Install dev MNE
    - script: pip install --progress-bar off -r requirements.txt -r requirements_doc.txt
      displayName: Install documentation dependencies
    - script: mne sys_info -pd
      displayName: Print config and test access to commands
    - script: python -c "import numpy; numpy.show_config()"
      displayName: Print NumPy config
    - bash: make -C doc html_dev-noplot
      displayName: 'Build doc'
