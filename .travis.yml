language: generic
dist: xenial
cache:
  pip: true
addons:
  apt:
    packages:
      - libxkbcommon-x11-0
env:
    # TRAVIS_PYTHON_VERSION is only needed for neo's setup.py
    # OPENBLAS_NUM_THREADS=1 avoid slowdowns:
    # https://github.com/xianyi/OpenBLAS/issues/731
    global: PYTHON_VERSION=3.7 DISPLAY=:99.0 MNE_LOGGING_LEVEL=warning
            TRAVIS_PYTHON_VERSION=3.7 CONDA_VERSION=">=4.3.27"
            OPENBLAS_NUM_THREADS=1

matrix:
    include:
        # Linux
        - os: linux
          env: CONDA_ENV="environment.yml"

        # OSX conda
        - os: osx
          env: CONDA_ENV="environment.yml"

        # PIP + non-default stim channel
        - os: linux
          env: MNE_STIM_CHANNEL=STI101
          language: python
          python: "3.7"

        # Old dependencies
        - os: linux
          env: PYTHON_VERSION=3.6
               CONDA_DEPENDENCIES="numpy=1.13 scipy=1.0 matplotlib=2.1 pandas=0.21 scikit-learn=0.19"
               CONDA_CHANNELS="conda-forge"

        # Minimal (runs with and without testing data)
        - os: linux
          env: DEPS=minimial
               CONDA_DEPENDENCIES="numpy scipy matplotlib"
               MNE_DONTWRITE_HOME=true MNE_FORCE_SERIAL=true MNE_SKIP_NETWORK_TEST=1

# Setup anaconda
before_install:
    - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;
      fi;
    - if [ -z "$CONDA_ENV" ] && [ -z "$CONDA_DEPENDENCIES" ]; then
        pip uninstall -yq numpy;
        pip install -f "https://7933911d6844c6c53a7d-47bd50c35cd79bd838daf386af554a83.ssl.cf2.rackcdn.com" --pre numpy scipy;
        pip install vtk;
        pip install $PIP_DEPENDENCIES;
        pip install --upgrade -r requirements.txt;
      else
        git clone https://github.com/astropy/ci-helpers.git;
        source ci-helpers/travis/setup_conda.sh;
        if [ ! -z "$CONDA_ENV" ]; then
          conda activate base;
          conda env update --file $CONDA_ENV;
          pip uninstall -yq mne;
        fi;
      fi
    # Always install these via pip so we get the latest possible versions (testing bugfixes)
    - pip install --upgrade "pytest<5.4" pytest-sugar pytest-cov pytest-mock pytest-timeout codecov
    - if [ "${DEPS}" != "minimal" ]; then
        pip install nitime;
      fi
    # Don't source mne_setup_sh here because changing PATH etc. can't be done in a script
    - if [ "${DEPS}" != "minimal" ]; then
        export MNE_ROOT="${PWD}/minimal_cmds";
        export PATH=${MNE_ROOT}/bin:$PATH;
        if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
          curl https://staff.washington.edu/larsoner/minimal_cmds.tar.gz | tar xz;
          export LD_LIBRARY_PATH=${MNE_ROOT}/lib:$LD_LIBRARY_PATH;
          export NEUROMAG2FT_ROOT="${PWD}/minimal_cmds/bin";
          export FREESURFER_HOME="${PWD}/minimal_cmds";
          export MNE_SKIP_FS_FLASH_CALL=1;
        else
          curl https://staff.washington.edu/larsoner/minimal_cmds_osx.tar.gz | tar xz;
          export DYLD_LIBRARY_PATH=${MNE_ROOT}/lib:$DYLD_LIBRARY_PATH;
        fi;
        mne_surf2bem --version;
      fi;

install:
    # Rvm overrides cd with a function so that it can hook into it to run
    # some scripts, see https://github.com/travis-ci/travis-ci/issues/8703
    - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
        unset -f cd;
      fi;
    # Suppress the parallel outputs for logging cleanliness
    - python setup.py build
    - python setup.py install
    - mne sys_info
    - python -c "import numpy; numpy.show_config()"
    - SRC_DIR=$(pwd)
    - cd ~
    # Trigger download of testing data
    - if [ "${DEPS}" != "minimal" ]; then
        python -c 'import mne; mne.datasets.testing.data_path(verbose=True)';
      fi;
    - cd ${SRC_DIR}


script:
    - echo "Print locale "
    - locale
    - echo "Other stuff"
    # OSX runs ~2x slower than Linux on Travis, so skip any slow ones there
    # Until https://github.com/numpy/numpy/issues/15580 is resolved we also
    # need the --pre wheels to skip slow ones.
    - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
        CONDITION='not slowtest';
      else
        CONDITION='not ultraslowtest';
      fi;
    # Determine directories to test (could use SPLIT=0 SPLIT=1 but currently
    # we are fast enough, so disable it)
    - if [ -z ${SPLIT} ]; then
        USE_DIRS="mne/";
      else
        if [ "${SPLIT}" == "0" ]; then
          MNE_DIRS=". beamformer channels commands connectivity datasets decoding forward gui inverse_sparse io";
        elif [ "${SPLIT}" == "1" ]; then
          MNE_DIRS="minimum_norm preprocessing realtime simulation stats time_frequency viz";
        elif [ "${SPLIT}" == "2" ]; then
          MNE_DIRS=".";
        else
          MNE_DIRS="beamformer channels commands connectivity datasets decoding forward gui inverse_sparse io";
        fi;
        USE_DIRS="";
        for DIR in ${MNE_DIRS}; do
          if [ "${DIR}" == "." ]; then
            USE_DIRS="mne/tests mne/*.py ${USE_DIRS}";
          else
            USE_DIRS="mne/${DIR}/ ${USE_DIRS}";
          fi;
        done;
      fi;
    # Test run_tests_if_main
    - if [ "${DEPS}" == "minimal" ]; then
        pip uninstall -yq mne;
        pip install -e .;
        python mne/tests/test_evoked.py;
      fi;
    - echo pytest -m "${CONDITION}" --cov=mne ${USE_DIRS}
    - pytest -m "${CONDITION}" --tb=short --cov=mne ${USE_DIRS}
    # run the minimal one with the testing data
    - if [ "${DEPS}" == "minimal" ]; then
        export MNE_SKIP_TESTING_DATASET_TESTS=false;
        python -c 'import mne; mne.datasets.testing.data_path(verbose=True)';
      fi;
    - if [ "${DEPS}" == "minimal" ]; then
        pytest -m "${CONDITION}" --tb=short --cov=mne ${USE_DIRS};
      fi;

after_script:
    # Need to run from source dir to exectue "git" commands
    - cd ${SRC_DIR};
    - codecov;
