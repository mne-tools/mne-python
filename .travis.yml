language: c
dist: trusty
sudo: false
cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/.ccache
env:
    # TRAVIS_PYTHON_VERSION is only needed for neo's setup.py
    global: PYTHON_VERSION=2.7
            MNE_LOGGING_LEVEL=warning
            TEST_LOCATION=src
            SPLIT_0=". beamformer channels commands connectivity datasets decoding forward gui inverse_sparse io"
            SPLIT_1="minimum_norm preprocessing realtime simulation stats time_frequency viz"
            TRAVIS_PYTHON_VERSION=3.6
            PIP_DEPENDENCIES="codecov pytest-faulthandler"
            MKL_NUM_THREADS=1
os: linux

# No 2.7 env provided currently because of QDate API junk
# Can't move to 3.6 until mayavi/traitsui/pyface properly integrate with Qt5
# Use specific commits for traitsui/pyface to deal with Py3k bugs
matrix:
    include:
        # No data + style testing
        - env: DEPS=nodata MNE_DONTWRITE_HOME=true MNE_FORCE_SERIAL=true MNE_SKIP_NETWORK_TEST=1
               OPTION="--doctest-ignore-import-errors"
               CONDA_DEPENDENCIES="numpy scipy matplotlib sphinx nose pytest pytest-cov"
               PIP_DEPENDENCIES="flake8 numpydoc codespell pydocstyle codecov check-manifest pytest-sugar pytest-xdist"

        # 3.5 env file + non-default stim channel
        - env: SPLIT=0 MNE_STIM_CHANNEL=STI101
               CONDA_ENVIRONMENT="environment.yml"
        - env: SPLIT=1 MNE_STIM_CHANNEL=STI101
               CONDA_ENVIRONMENT="environment.yml"

        # OSX
        - os: osx
          env: SPLIT=0 TEST_LOCATION=install
               CONDA_ENVIRONMENT="environment.yml"
        - os: osx
          env: SPLIT=1 TEST_LOCATION=install
               CONDA_ENVIRONMENT="environment.yml"

        # 2.7 (no mayavi so we can use latest versions of everything else)
        - env: SPLIT=0
               CONDA_DEPENDENCIES="numpy scipy matplotlib pandas scikit-learn h5py pillow statsmodels nose pytest pytest-cov"
               PIP_DEPENDENCIES="nitime nilearn nibabel joblib codecov pytest-sugar pytest-attrib"
        - env: SPLIT=1
               CONDA_DEPENDENCIES="numpy scipy matplotlib pandas scikit-learn h5py pillow statsmodels nose pytest pytest-cov"
               PIP_DEPENDENCIES="nitime nilearn nibabel joblib codecov pytest-sugar pytest-attrib"

        # Oldest supported dependencies
        - env: SPLIT=0
               CONDA_DEPENDENCIES="numpy=1.8 scipy=0.12 matplotlib=1.3 pandas=0.12 scikit-learn=0.14 nose pytest pytest-cov"
               PIP_DEPENDENCIES="codecov pytest-sugar pytest-cov"
        - env: SPLIT=1
               CONDA_DEPENDENCIES="numpy=1.8 scipy=0.12 matplotlib=1.3 pandas=0.12 scikit-learn=0.14 nose pytest pytest-cov"
               PIP_DEPENDENCIES="codecov pytest-sugar pytest-cov pytest-xdist"

        # Minimal
        - env: DEPS=minimial
               CONDA_DEPENDENCIES="numpy scipy matplotlib nose pytest pytest-cov"
               PIP_DEPENDENCIES="codecov pytest-sugar pytest-xdist"

# Setup anaconda
before_install:
    # Mayavi needs a display to build via pip (?!)
    - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;
      fi;
    - git clone https://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh
    # Don't source mne_setup_sh here because changing PATH etc. can't be done in a script
    - if [ "${DEPS}" == "" ]; then
        export MNE_ROOT="${PWD}/minimal_cmds";
        export PATH=${MNE_ROOT}/bin:$PATH;
        if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
          curl https://staff.washington.edu/larsoner/minimal_cmds.tar.gz | tar xz;
          export LD_LIBRARY_PATH=${MNE_ROOT}/lib:$LD_LIBRARY_PATH;
          export NEUROMAG2FT_ROOT="${PWD}/minimal_cmds/bin";
        else
          curl https://staff.washington.edu/larsoner/minimal_cmds_osx.tar.gz | tar xz;
          export DYLD_LIBRARY_PATH=${MNE_ROOT}/lib:$DYLD_LIBRARY_PATH;
        fi;
        mne_surf2bem --version;
      fi;
    - if [ "${SPLIT}" == "0" ]; then
        MNE_DIRS=${SPLIT_0};
      elif [ "${SPLIT}" == "1" ]; then
        MNE_DIRS=${SPLIT_1};
      else
        MNE_DIRS="";
      fi

install:
    # Need to uninstall the PIP-installed version
    - if [ ! -z $CONDA_ENVIRONMENT ]; then
        pip uninstall -qy mne;
      fi;
    - python setup.py build
    - python setup.py install
    - python -c "import mne; mne.sys_info()"
    - SRC_DIR=$(pwd)
    - cd ~
    # Trigger download of testing data. Note that
    # the testing dataset has been constructed to contain the necessary
    # files to act as a FREESURFER_HOME for the coreg tests
    - if [ "${DEPS}" != "nodata" ]; then
        python -c 'import mne; mne.datasets.testing.data_path(verbose=True)';
        if [ "${DEPS}" == "" && "${TRAVIS_OS_NAME}" == "linux" ]; then
          export FREESURFER_HOME=$(python -c 'import mne; print(mne.datasets.testing.data_path())');
          export MNE_SKIP_FS_FLASH_CALL=1;
        fi;
      else
        export MNE_SKIP_TESTING_DATASET_TESTS=true;
      fi;
    - MNE_DIR=$(python -c 'import mne;print(mne.__path__[0])')
    # We run two versions: one out of the source directory (that makes
    # coveralls coverage work), and one out of the install directory (that
    # ensures we have included all necessary files).
    - if [ "${TEST_LOCATION}" == "install" ]; then
        ln -s ${SRC_DIR}/mne/io/tests/data ${MNE_DIR}/io/tests/data;
        ln -s ${SRC_DIR}/mne/io/bti/tests/data ${MNE_DIR}/io/bti/tests/data;
        ln -s ${SRC_DIR}/mne/io/edf/tests/data ${MNE_DIR}/io/edf/tests/data;
        ln -s ${SRC_DIR}/mne/io/kit/tests/data ${MNE_DIR}/io/kit/tests/data;
        ln -s ${SRC_DIR}/mne/io/brainvision/tests/data ${MNE_DIR}/io/brainvision/tests/data;
        ln -s ${SRC_DIR}/mne/io/egi/tests/data ${MNE_DIR}/io/egi/tests/data;
        ln -s ${SRC_DIR}/mne/io/nicolet/tests/data ${MNE_DIR}/io/nicolet/tests/data;
        ln -s ${SRC_DIR}/mne/preprocessing/tests/data ${MNE_DIR}/preprocessing/tests/data;
        ln -s ${SRC_DIR}/setup.cfg ${MNE_DIR}/../setup.cfg;
        ln -s ${SRC_DIR}/.coveragerc ${MNE_DIR}/../.coveragerc;
        cd ${MNE_DIR}/../;
        COVERAGE=;
      else
        cd ${SRC_DIR};
        COVERAGE=--with-coverage;
      fi;

script:
    - echo "Print locale "
    - locale
    - echo "Other stuff"
    # OSX runs ~2x slower than Linux on Travis, so skip any slow ones there
    - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
        CONDITION='not slowtest';
      else
        CONDITION='not ultraslowtest';
      fi;
    - python -c "import mne; print(mne.sys_info())"
    # Determine directories to test
    - if [ "${MNE_DIRS}" != "" ]; then
        USE_DIRS="";
        for DIR in ${MNE_DIRS}; do
          USE_DIRS="mne/${DIR}/tests ${USE_DIRS}";
        done;
      else
        USE_DIRS="mne/";
      fi;
    - echo py.test -m "\"${CONDITION}\"" ${OPTION} ${USE_DIRS} -n 2;
    - py.test -m "\"${CONDITION}\"" ${OPTION} ${USE_DIRS};
    - if [ "${DEPS}" == "nodata" ]; then
        make pep;
        check-manifest --ignore doc,logo,mne/io/*/tests/data*,mne/io/tests/data,mne/preprocessing/tests/data;
      fi;

after_success:
    - cd ${SRC_DIR};
    - codecov;
