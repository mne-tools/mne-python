trigger:
  # start a new build for every push
  batch: False
  branches:
    include:
      - 'master'
      - 'maint/*'
pr:
  branches:
    include:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string

jobs:

- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'
  variables:
    OPENBLAS_NUM_THREADS: 1
    PYTHONUNBUFFERED: 1
  strategy:
    matrix:
      3.8 pip pre:
        PYTHON_ARCH: 'x64'
        PYTHON_VERSION: '3.8'
        BITS: 64
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      architecture: $(PYTHON_ARCH)
      addToPath: true
    displayName: 'Get Python'


  - bash: |
      set -e
      git clone git://github.com/numpy/numpy.git numpy_install --depth=1
      cd numpy_install
      git remote add mattip https://github.com/mattip/numpy.git
      git fetch mattip issue-16913
      git checkout -b issue-16913 mattip/issue-16913


  - script: python -m pip install --upgrade pip
    displayName: 'Install tools'
  - script: python -m pip install -r numpy_install/test_requirements.txt
    displayName: 'Install dependencies; some are optional to avoid test skips'
  - powershell: |
      $ErrorActionPreference = "Stop"
      # Download and get the path to "openblas.a". We cannot copy it
      # to $PYTHON_EXE's directory since that is on a different drive which
      # mingw does not like. Instead copy it to a directory and set OPENBLAS,
      # since OPENBLAS will be picked up by the openblas discovery
      cd numpy_install
      $target = $(python tools/openblas_support.py)
      mkdir openblas
      echo Copying $target to openblas/openblas$env:OPENBLAS_SUFFIX.a
      cp $target openblas/openblas$env:OPENBLAS_SUFFIX.a
      If ( Test-Path env:NPY_USE_BLAS_ILP64 ){
          echo "##vso[task.setvariable variable=OPENBLAS64_]$pwd\openblas"
      } else {
          echo "##vso[task.setvariable variable=OPENBLAS]$pwd\openblas"
      }
    displayName: 'Download / Install OpenBLAS'

  - powershell: |
      choco install -y mingw --forcex86 --force --version=7.3.0
    displayName: 'Install 32-bit mingw for 32-bit builds'
    condition: eq(variables['BITS'], 32)
  # NOTE: for Windows builds it seems much more tractable to use runtests.py
  # vs. manual setup.py and then runtests.py for testing only
  - powershell: |
      If ($(BITS) -eq 32) {
          $env:CFLAGS = "-m32"
          $env:LDFLAGS = "-m32"
          $env:PATH = "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw$(BITS)\\bin;" + $env:PATH
          refreshenv
      }
      cd numpy_install
      python -c "from tools import openblas_support; openblas_support.make_init('numpy')"
      pip wheel -v -v -v --no-build-isolation --no-use-pep517 --wheel-dir=dist .
      ls dist -r | Foreach-Object {
          pip install $_.FullName
      }
    displayName: 'Build NumPy'

  - script: python -c "import numpy; numpy.test('full')"
    displayName: Run NumPy tests

  - bash: |
      set -e
      python -m pip install --upgrade --pre --only-binary ":all:" -f "https://7933911d6844c6c53a7d-47bd50c35cd79bd838daf386af554a83.ssl.cf2.rackcdn.com" scipy matplotlib
      python -m pip install pytest pytest-timeout pytest-cov
      mkdir bad
    displayName: 'Install dependencies with pip --pre'
  - script: python setup.py develop
    displayName: 'Install MNE-Python dev'
  - script: mne sys_info
    displayName: 'Print config and test access to commands'
  - script: python -c "import numpy; numpy.show_config()"
    displayName: Print NumPy config
  - script: python -c "import mne; mne.datasets.testing.data_path(verbose=True)"
    displayName: 'Get test data'
  - script: pytest --tb=short mne/minimum_norm/tests -k inverse_epochs
    displayName: 'Run tests'
  - task: PublishPipelineArtifact@1
    inputs:
      path: $(System.DefaultWorkingDirectory)/bad
      artifact: badrun
    condition: always()
  - script: python -c "import numpy as np, glob; data = np.load(glob.glob('bad/*.npz')[0]); a, b = data['a'], data['b']; print(np.dot(a, b).shape)"
    displayName: Reproduce
    condition: always()
