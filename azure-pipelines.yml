trigger:
  # start a new build for every push
  batch: False
  branches:
    include:
      - 'main'
      - 'maint/*'
pr:
  branches:
    include:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string


stages:

- stage: Check
  jobs:
    - job: Skip
      pool:
        vmImage: 'ubuntu-18.04'
      variables:
        DECODE_PERCENTS: 'false'
        RET: 'true'
      steps:
      - bash: |
          git_log=`git log --max-count=1 --skip=1 --pretty=format:"%s"`
          echo "##vso[task.setvariable variable=log]$git_log"
      - bash: echo "##vso[task.setvariable variable=RET]false"
        condition: or(contains(variables.log, '[skip azp]'), contains(variables.log, '[azp skip]'), contains(variables.log, '[skip ci]'), contains(variables.log, '[ci skip]'))
      - bash: echo "##vso[task.setvariable variable=start_main;isOutput=true]$RET"
        name: result

- stage: Main
  condition: and(succeeded(), eq(dependencies.Check.outputs['Skip.result.start_main'], 'true'))
  dependsOn: Check
  variables:
    AZURE_CI: 'true'
  jobs:
  - job: Style
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
      PYTHON_VERSION: '3.8'
      PYTHON_ARCH: 'x64'
    steps:
    - bash: echo $(COMMIT_MSG)
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
        architecture: $(PYTHON_ARCH)
        addToPath: true
      displayName: 'Get Python'
    - bash: |
        set -e
        python -m pip install --upgrade pip setuptools
        python -m pip install numpy scipy matplotlib -r requirements_testing.txt
      displayName: Install dependencies
      condition: always()
    - bash: |
        make pydocstyle
      displayName: make pydocstyle
      condition: always()
    - bash: |
        make docstring
      displayName: make docstring
    - bash: |
        make nesting
      displayName: make nesting
      condition: always()
    - bash: |
        make check-manifest
      displayName: make check-manifest
      condition: always()
    - bash: |
        make check-readme
      displayName: make check-readme
      condition: always()


  - job: Ultraslow
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
      DISPLAY: ':99'
      OPENBLAS_NUM_THREADS: '1'
    steps:
    - bash: |
        sudo apt install libxkbcommon-x11-0 xvfb tcsh libxcb*
      displayName: 'Install Ubuntu dependencies'
    - bash: |
        source tools/get_minimal_commands.sh
      displayName: 'Install minimal commands'
    - bash: |
        echo $PATH
        mne_surf2bem --version
        fsl_rigid_register --version
      displayName: 'Test minimal commands'
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
        architecture: 'x64'
        addToPath: true
      displayName: 'Get Python'
    - bash: |
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;
      displayName: 'Spin up Xvfb'
    - bash: |
        set -e
        python -m pip install --upgrade pip setuptools
        python -m pip install --upgrade numpy scipy vtk -r requirements.txt -r requirements_testing.txt codecov
      displayName: 'Install dependencies with pip'
    - bash: source tools/get_testing_version.sh
      displayName: 'Get testing version'
    - task: Cache@2
      inputs:
        key: $(testing_version)
        path: /home/vsts/mne_data
      displayName: 'Cache testing data'
    - script: python -c "import mne; mne.datasets.testing.data_path(verbose=True)"
      displayName: 'Get test data'
    - script: pytest -m "ultraslowtest" --tb=short --cov=mne -vv mne
      displayName: 'Run ultraslow tests'
    - script: codecov --root $BUILD_REPOSITORY_LOCALPATH -t $CODECOV_TOKEN
      displayName: 'Codecov'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
      condition: succeededOrFailed()
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'junit-*.xml'
        testRunTitle: 'Publish test results for $(Agent.JobName)'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()


  - job: Notebook
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - bash: |
        set -e
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh --progress=dot:mega
        bash miniconda.sh -b -p ~/miniconda
        source ~/miniconda/etc/profile.d/conda.sh
        conda activate base
        conda env update --file server_environment.yml
        pip uninstall -yq mne
        pip install -ve .
        pip install pytest pytest-cov pytest-timeout pytest-sugar pytest-xdist flake8 codecov
        echo "##vso[task.setvariable variable=PATH]${PATH}"
        echo "##vso[task.setvariable variable=LD_LIBRARY_PATH]${LD_LIBRARY_PATH}"
      displayName: 'Install dependencies'
    - script: mne sys_info
      displayName: 'Print config and test access to commands'
    - bash: source tools/get_testing_version.sh
      displayName: 'Get testing version'
    - task: Cache@2
      inputs:
        key: $(testing_version)
        path: /home/vsts/mne_data
      displayName: 'Cache testing data'
    - script: python -c "import mne; mne.datasets.testing.data_path(verbose=True)"
      displayName: 'Get test data'
    - script: pytest --tb=short --cov=mne -vv mne/viz
      displayName: 'Run viz tests'
    - script: codecov --root $BUILD_REPOSITORY_LOCALPATH -t $CODECOV_TOKEN
      displayName: 'Codecov'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
      condition: succeededOrFailed()
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'junit-*.xml'
        testRunTitle: 'Publish test results for $(Agent.JobName)'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()


  - job: Windows
    pool:
      vmImage: 'VS2017-Win2016'
    variables:
      MNE_LOGGING_LEVEL: 'warning'
      MNE_FORCE_SERIAL: 'true'
      OPENBLAS_NUM_THREADS: 1
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: 'utf-8'
      AZURE_CI_WINDOWS: 'true'
      PYTHON_ARCH: 'x64'
    strategy:
      maxParallel: 4
      matrix:
        3.7 conda:
          PLATFORM: 'x86-64'
          TEST_MODE: 'conda'
          PYTHON_VERSION: '3.8'
        3.7 pip:
          TEST_MODE: 'pip'
          PYTHON_VERSION: '3.7'
        3.8 pip pre:
          TEST_MODE: 'pip-pre'
          PYTHON_VERSION: '3.8'
          OPENBLAS_CORETYPE: 'prescott'  # workaround for https://github.com/numpy/numpy/issues/16913
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
        architecture: $(PYTHON_ARCH)
        addToPath: true
      condition: in(variables['TEST_MODE'], 'pip', 'pip-pre')
      displayName: 'Get Python'
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda
    # https://github.com/MicrosoftDocs/pipelines-anaconda
    # Qt 5.9 post-link failure:
    # https://github.com/ContinuumIO/anaconda-issues/issues/10949
    - script: echo "##vso[task.prependpath]%CONDA%;%CONDA%\condabin;%CONDA%\Scripts;%CONDA%\Library\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;"
      condition: in(variables['TEST_MODE'], 'conda')
      displayName: Add conda to PATH, deal with Qt 5.9 bug
    - bash: |
        set -e
        git clone --depth 1 git://github.com/pyvista/gl-ci-helpers.git
        powershell gl-ci-helpers/appveyor/install_opengl.ps1
      displayName: Install OpenGL
    - bash: |
        set -e
        ./tools/azure_dependencies.sh
      condition: in(variables['TEST_MODE'], 'pip', 'pip-pre')
      displayName: 'Install dependencies with pip'
    - powershell: |
        Set-StrictMode -Version Latest
        $ErrorActionPreference = "Stop"
        $PSDefaultParameterValues['*:ErrorAction']='Stop'
        conda update -n base -c defaults conda
        conda env update --name base --file environment.yml
        pip uninstall -yq mne
        pip install -r requirements_testing.txt codecov
      condition: eq(variables['TEST_MODE'], 'conda')
      displayName: 'Install dependencies with conda'
    - script: python setup.py develop
      displayName: 'Install MNE-Python dev'
    - script: mne sys_info
      displayName: 'Print config and test access to commands'
    - script: python -c "import numpy; numpy.show_config()"
      displayName: Print NumPy config
    - bash: source tools/get_testing_version.sh
      displayName: 'Get testing version'
    - task: Cache@2
      inputs:
        key: $(testing_version)
        path: C:\Users\VssAdministrator\mne_data
      displayName: 'Cache testing data'
    - script: python -c "import mne; mne.datasets.testing.data_path(verbose=True)"
      displayName: 'Get test data'
    - script: pytest -m "not slowtest" --tb=short --cov=mne -vv mne
      displayName: 'Run tests'
    - script: codecov --root %BUILD_REPOSITORY_LOCALPATH% -t %CODECOV_TOKEN%
      displayName: 'Codecov'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
      condition: succeededOrFailed()
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'junit-*.xml'
        testRunTitle: 'Publish test results for $(Agent.JobName) $(TEST_MODE) $(PYTHON_VERSION)'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
