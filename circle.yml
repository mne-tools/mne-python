machine:
  environment:
    # We need to set this variable to let Anaconda take precedence
    PATH: "/home/ubuntu/miniconda/envs/mne27/bin:/home/ubuntu/miniconda/bin:$PATH"
    DISPLAY: ":99.0"

# We should really build merged versions like on Travis, not the individual branches
# Adapted from:
# https://gist.github.com/amacneil/f14db753919e0af2d7d2f5a8da7fce65
checkout:
  post:
    - echo $(git log -1 --pretty=%B) | tee gitlog.txt
    - echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
    - if [[ $(cat merge.txt) != "" ]]; then
        echo "Merging $(cat merge.txt)";
        git pull --ff-only origin "refs/pull/$(cat merge.txt)/merge";
      fi

dependencies:
  cache_directories:
    - "~/miniconda"
    - "~/.mne"
    - "~/mne_data/HF_SEF"
    - "~/mne_data/MNE-sample-data"
    - "~/mne_data/MNE-testing-data"
    - "~/mne_data/MNE-misc-data"
    - "~/mne_data/MNE-spm-face"
    - "~/mne_data/MNE-somato-data"
    - "~/mne_data/MNE-brainstorm-data"
    - "~/mne_data/MNE-kiloword-data"
    - "~/mne_data/MEGSIM"
    - "~/mne_data/MNE-eegbci-data"
    - "~/mne_data/mTRF_1.5"
    - "~/mne_data/MNE-fieldtrip_cmc-data"
    - "~/mne-tools.github.io"
  # Various dependencies
  pre:
    # Get a running Python
    - cd ~;
    # Disable pyenv (no cleaner way provided by CircleCI as it prepends pyenv version to PATH)
    - rm -rf ~/.pyenv;
    - rm -rf ~/virtualenvs;
    # Get Anaconda and conda-based requirements
    - >
      if [ ! -d "/home/ubuntu/miniconda" ]; then
        echo "Setting up conda";
        wget -q http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O ~/miniconda.sh;
        chmod +x ~/miniconda.sh;
        ~/miniconda.sh -b -p /home/ubuntu/miniconda;
      else
        echo "Conda already set up.";
      fi
    - if ! conda env list | grep mne27; then
        conda update --yes --quiet conda;
        conda env create -f environment2.yml;
        pip uninstall --yes mne sphinx-gallery;
      else
        echo "Conda env already set up.";
      fi;
    - ls -al /home/ubuntu/miniconda;
    - ls -al /home/ubuntu/miniconda/bin;
    - echo $PATH;
    - echo $CIRCLE_BRANCH
    - which python;
    - which pip;
    - pip install --upgrade --no-deps git+https://github.com/sphinx-gallery/sphinx-gallery.git;
    - python -c "from mayavi import mlab"

  override:
    # Figure out if we should run a full, pattern, or noplot version
    - cd /home/ubuntu/mne-python && python setup.py develop;
    - if ! git remote -v | grep upstream ; then git remote add upstream git://github.com/mne-tools/mne-python.git; fi;
    - git fetch upstream;
    - git branch -a;
    - mkdir -p ~/mne_data;
    - if [[ $(cat gitlog.txt) == *"[circle front]"* ]]; then
        PATTERN="plot_mne_dspm_source_localization.py\|plot_receptive_field.py\|plot_mne_inverse_label_connectivity.py\|plot_sensors_decoding.py\|plot_stats_cluster_spatio_temporal.py\|plot_visualize_evoked.py\|";
      else
        PATTERN="";
      fi;
      if [ "$CIRCLE_BRANCH" == "master" ] || [[ $(cat gitlog.txt) == *"[circle full]"* ]]; then
        echo html_dev > build.txt;
      elif [ "$CIRCLE_BRANCH" == "maint/0.15" ]; then
        echo html_stable > build.txt;
      else
        FNAMES=$(git diff --name-only $CIRCLE_BRANCH $(git merge-base $CIRCLE_BRANCH upstream/master));
        echo FNAMES="$FNAMES";
        for FNAME in $FNAMES; do
          if [[ `expr match $FNAME "\(tutorials\|examples\)/.*plot_.*\.py"` ]] ; then
            echo "Checking example $FNAME ...";
            PATTERN=`basename $FNAME`"\\|"$PATTERN;
            if [[ $(cat $FNAME | grep -x ".*datasets.*sample.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.sample.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*spm_face.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.spm_face.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*somato.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.somato.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*eegbci.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.eegbci.load_data(1, [6, 10, 14], update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*hf_sef.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.hf_sef.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*brainstorm.*bst_auditory.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.brainstorm.bst_auditory.data_path(update_path=True))" --accept-brainstorm-license;
            fi;
            if [[ $(cat $FNAME | grep -x ".*brainstorm.*bst_raw.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.brainstorm.bst_raw.data_path(update_path=True))" --accept-brainstorm-license;
            fi;
            if [[ $(cat $FNAME | grep -x ".*brainstorm.*bst_phantom_ctf.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.brainstorm.bst_phantom_ctf.data_path(update_path=True))" --accept-brainstorm-license;
            fi;
            if [[ $(cat $FNAME | grep -x ".*brainstorm.*bst_phantom_elekta.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.brainstorm.bst_phantom_elekta.data_path(update_path=True))" --accept-brainstorm-license;
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*megsim.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.megsim.load_data(condition='visual', data_format='single-trial', data_type='simulation', update_path=True))";
              python -c "import mne; print(mne.datasets.megsim.load_data(condition='visual', data_format='raw', data_type='experimental', update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*hcp_mmp_parcellation.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.sample.data_path(update_path=True))";
              SUBJECTS_DIR=~/mne_data/MNE-sample-data/subjects python -c "import mne; print(mne.datasets.fetch_hcp_mmp_parcellation())" --accept-hcpmmp-license;
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*misc.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.misc.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*testing.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.testing.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*kiloword.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.kiloword.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*mtrf.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.mtrf.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*fieldtrip_cmc.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.fieldtrip_cmc.data_path(update_path=True))";
            fi;
            if [[ $(cat $FNAME | grep -x ".*datasets.*multimodal.*" | wc -l) -gt 0 ]]; then
              python -c "import mne; print(mne.datasets.multimodal.data_path(update_path=True))";
            fi;
          fi;
        done;
        echo PATTERN="$PATTERN";
        echo NEED_SAMPLE="$NEED_SAMPLE";
        if [[ $PATTERN ]]; then
          PATTERN="\(${PATTERN::-2}\)";
          echo html_dev-pattern > build.txt;
        else
          echo html_dev-noplot > build.txt;
        fi;
      fi;
      echo "$PATTERN" > pattern.txt;
    - echo BUILD="$(cat build.txt)"
    - ls -al ~/mne_data;
    - if [[ $(cat build.txt) == "html_dev" ]] || [[ $(cat build.txt) == "html_stable" ]]; then
        SUBJECTS_DIR=/home/ubuntu/mne_data/MNE-sample-data/subjects python -c "import mne; mne.datasets._download_all_example_data()";
      fi;
    - python -c "import mne; mne.sys_info()";
    - >
      if [ ! -d "/home/ubuntu/mne-tools.github.io" ]; then
        cd .. && git clone https://github.com/mne-tools/mne-tools.github.io.git && cd mne-tools.github.io;
      fi;
    - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;

test:
  override:
    # Mayavi can bomb on exit (yay!), turning a successful build into a failure.
    # We thus tee into a log (which returns 0) and then parse afterward for
    # what immediately precedes the "Build finished." line.
    - if [[ $(cat build.txt) == "html_dev-noplot" ]]; then cd doc && make html_dev-noplot | tee $CIRCLE_ARTIFACTS/log.txt; elif [[ $(cat build.txt) == "html_dev-pattern" ]]; then cd doc && PATTERN=$(cat ../pattern.txt) make html_dev-pattern | tee $CIRCLE_ARTIFACTS/log.txt; else make test-doc; cd doc; make $(cat ../build.txt) | tee $CIRCLE_ARTIFACTS/log.txt; fi:
          timeout: 1500
    - tail -n 20 $CIRCLE_ARTIFACTS/log.txt | tee /dev/tty | grep -E "auto_tutorials\s*\[100%\]\s*plot_|Build finished"
  post:
    - if [[ $(cat build.txt) == "html" ]]; then
        cp -a doc/_build/html_stable $CIRCLE_ARTIFACTS/;
      else
        cp -a doc/_build/html $CIRCLE_ARTIFACTS/;
      fi;

deployment:
  production:
    branch: master
    commands:
      - git config --global user.email "circle@mne.com"
      - git config --global user.name "Circle Ci"
      - cd ../mne-tools.github.io && git checkout master && git pull origin master
      - cd doc/_build && rm -Rf ~/mne-tools.github.io/dev && cp -a html ~/mne-tools.github.io/dev
      - cd ../mne-tools.github.io && git add -A && git commit -m 'Automated update of dev docs.' && git push origin master
  stable:
    branch: maint/0.15
    commands:
      - git config --global user.email "circle@mne.com"
      - git config --global user.name "Circle Ci"
      - cd ../mne-tools.github.io && git checkout master && git pull origin master
      - cd doc/_build && rm -Rf ~/mne-tools.github.io/stable && cp -a html_stable ~/mne-tools.github.io/stable
      - cd ../mne-tools.github.io && git add -A && git commit -m 'Automated update of stable docs.' && git push origin master
