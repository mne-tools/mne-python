language: c
sudo: false
env:
    global: PYTHON_VERSION=2.7 DISPLAY=:99.0 MNE_LOGGING_LEVEL=warning TEST_LOCATION=src

matrix:
    include:
        # Full (Linux, 2.7)
        - os: linux
          env: CONDA_DEPENDENCIES="numpy scipy matplotlib pandas scikit-learn h5py pillow statsmodels mayavi"
               PIP_DEPENDENCIES="pysurfer nitime faulthandler joblib nibabel codecov nose-timer"

        # OSX
        - os: osx
          env: CONDA_DEPENDENCIES="numpy scipy matplotlib pandas scikit-learn h5py pillow statsmodels mayavi"
               PIP_DEPENDENCIES="pysurfer nitime faulthandler joblib nibabel codecov nose-timer"
        # Py3k + non-default stim channel
        - os: linux
          env: PYTHON_VERSION=3.5 TEST_LOCATION=install MNE_STIM_CHANNEL=STI101
               CONDA_DEPENDENCIES="numpy scipy matplotlib pandas scikit-learn h5py pillow statsmodels"
               PIP_DEPENDENCIES="nitime joblib nibabel codecov nose-timer"
        # Old dependencies
        - os: linux
          env: CONDA_DEPENDENCIES="numpy=1.8 scipy=0.12 matplotlib=1.3 pandas=0.12 scikit-learn=0.14"
               PIP_DEPENDENCIES="codecov nose-timer"
        # Minimal
        - os: linux
          env: DEPS=minimial
               CONDA_DEPENDENCIES="numpy scipy matplotlib"
               PIP_DEPENDENCIES="codecov nose-timer"
        # No data + style testing
        - os: linux
          env: DEPS=nodata MNE_DONTWRITE_HOME=true MNE_FORCE_SERIAL=true MNE_SKIP_NETWORK_TEST=1
               CONDA_DEPENDENCIES="numpy scipy matplotlib sphinx"
               PIP_DEPENDENCIES="flake8 numpydoc codespell git+git://github.com/PyCQA/pydocstyle.git codecov nose-timer"

# Setup anaconda
before_install:
    - git clone https://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh
    - if [ "${DEPS}" == "" && "${TRAVIS_OS_NAME}" == "linux" ]; then
        curl https://staff.washington.edu/larsoner/minimal_cmds.tar.gz | tar xz;
        export MNE_ROOT="${PWD}/minimal_cmds";
        export NEUROMAG2FT_ROOT="${PWD}/minimal_cmds/bin";
        source ${MNE_ROOT}/bin/mne_setup_sh;
      fi;
    - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;
      fi;

install:
    # Suppress the parallel outputs for logging cleanliness
    - python setup.py build
    - python setup.py install
    - python -c "import mne; mne.sys_info()"
    - SRC_DIR=$(pwd)
    - cd ~
    # Trigger download of testing data. Note that
    # the testing dataset has been constructed to contain the necessary
    # files to act as a FREESURFER_HOME for the coreg tests
    - if [ "${DEPS}" != "nodata" ]; then
        python -c 'import mne; mne.datasets.testing.data_path(verbose=True)';
        if [ "${DEPS}" == "" && "${TRAVIS_OS_NAME}" == "linux" ]; then
          export FREESURFER_HOME=$(python -c 'import mne; print(mne.datasets.testing.data_path())');
          export MNE_SKIP_FS_FLASH_CALL=1;
        fi;
      else
        export MNE_SKIP_TESTING_DATASET_TESTS=true;
      fi;
    - MNE_DIR=$(python -c 'import mne;print(mne.__path__[0])')
    # We run two versions: one out of the source directory (that makes
    # coveralls coverage work), and one out of the install directory (that
    # ensures we have included all necessary files).
    - if [ "${TEST_LOCATION}" == "install" ]; then
        ln -s ${SRC_DIR}/mne/io/tests/data ${MNE_DIR}/io/tests/data;
        ln -s ${SRC_DIR}/mne/io/bti/tests/data ${MNE_DIR}/io/bti/tests/data;
        ln -s ${SRC_DIR}/mne/io/edf/tests/data ${MNE_DIR}/io/edf/tests/data;
        ln -s ${SRC_DIR}/mne/io/kit/tests/data ${MNE_DIR}/io/kit/tests/data;
        ln -s ${SRC_DIR}/mne/io/brainvision/tests/data ${MNE_DIR}/io/brainvision/tests/data;
        ln -s ${SRC_DIR}/mne/io/egi/tests/data ${MNE_DIR}/io/egi/tests/data;
        ln -s ${SRC_DIR}/mne/io/nicolet/tests/data ${MNE_DIR}/io/nicolet/tests/data;
        ln -s ${SRC_DIR}/mne/preprocessing/tests/data ${MNE_DIR}/preprocessing/tests/data;
        ln -s ${SRC_DIR}/setup.cfg ${MNE_DIR}/../setup.cfg;
        ln -s ${SRC_DIR}/.coveragerc ${MNE_DIR}/../.coveragerc;
        cd ${MNE_DIR}/../;
        COVERAGE=;
      else
        cd ${SRC_DIR};
        COVERAGE=--with-coverage;
      fi;


script:
    # OSX runs ~2x slower than Linux on Travis, so skip any slow ones there
    - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
        nosetests -a '!slow_test' --with-timer --timer-top-n 30 --verbosity=2 $COVERAGE;
      else
        nosetests -a '!ultra_slow_test' --with-timer --timer-top-n 30 --verbosity=2 $COVERAGE;
      fi;
    - if [ "${DEPS}" == "nodata" ]; then
        make flake;
      fi;
    - if [ "${DEPS}" == "nodata" ]; then
        make codespell-error;
      fi;
    - if [ "${DEPS}" == "nodata" ]; then
        make docstyle;
      fi;

after_success:
    # Need to run from source dir to exectue "git" commands
    - if [ "${TEST_LOCATION}" == "src" ]; then
        echo "Running codecov";
        cd ${SRC_DIR};
        codecov;
      fi;
