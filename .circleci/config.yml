# Tagging a commit with [circle front] will build the front page and perform test-doc.
# Tagging a commit with [circle full] will build everything.
version: 2
jobs:
    build_docs:
      docker:
        - image: circleci/python:3.8.5-buster
      steps:
        - checkout
        - run:
            name: Set BASH_ENV
            command: |
              set -e
              echo "set -e" >> $BASH_ENV
              echo "export DISPLAY=:99" >> $BASH_ENV
              echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
              echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci"  >> $BASH_ENV
              source tools/get_minimal_commands.sh
              echo "source ${PWD}/tools/get_minimal_commands.sh" >> $BASH_ENV
              echo "export MNE_3D_BACKEND=pyvista" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:${MNE_ROOT}/bin:$PATH" >> $BASH_ENV
              echo "BASH_ENV:"
              cat $BASH_ENV
        - run:
            name: check neuromag2ft
            command: |
              neuromag2ft --version

        - run:
            name: Merge with upstream
            command: |
              echo $(git log -1 --pretty=%B) | tee gitlog.txt
              echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
              if [[ $(cat merge.txt) != "" ]]; then
                echo "Merging $(cat merge.txt)";
                git remote add upstream git://github.com/mne-tools/mne-python.git;
                git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
                git fetch upstream master;
              fi

        # Load our data
        - restore_cache:
            keys:
              - data-cache-0
              - data-cache-1
              - data-cache-2
              - data-cache-3
              - data-cache-4
              - data-cache-5
              - data-cache-6
              - data-cache-7
              - data-cache-8
              - pip-cache

        - run:
            name: Install 3D rendering libraries \ PyQt5 dependencies \ graphviz \ optipng (for optimized images)
            command: |
              sudo apt-get install libosmesa6 libglx-mesa0 libopengl0 libglx0 libdbus-1-3 \
                  libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-xfixes0 libxcb-xinerama0 \
                  graphviz \
                  optipng

        - run:
            name: Spin up Xvfb
            command: |
              /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;

        # https://github.com/ContinuumIO/anaconda-issues/issues/9190#issuecomment-386508136
        # https://github.com/golemfactory/golem/issues/1019

        - run:
            name: Install fonts needed for diagrams
            command: |
              mkdir -p $HOME/.fonts
              curl https://codeload.github.com/adobe-fonts/source-code-pro/tar.gz/2.030R-ro/1.050R-it | tar xz -C $HOME/.fonts
              curl https://codeload.github.com/adobe-fonts/source-sans-pro/tar.gz/3.006R | tar xz -C $HOME/.fonts
              fc-cache -f

        - run:
            name: Get Python running
            command: |
              python -m pip install --user --upgrade --progress-bar off pip setuptools
              python -m pip install --user --upgrade --progress-bar off --pre sphinx
              python -m pip install --user --progress-bar off https://github.com/pyvista/pyvista/zipball/master
              python -m pip install --user --progress-bar off https://github.com/pyvista/pyvistaqt/zipball/master
              python -m pip install --user --upgrade --progress-bar off -r requirements.txt -r requirements_testing.txt -r requirements_doc.txt
              python -m pip uninstall -yq pysurfer mayavi
              python -m pip install --user -e .

        - save_cache:
            key: pip-cache
            paths:
              - ~/.cache/pip

        - run:
            name: Check PyQt5
            command: LD_DEBUG=libs python -c "from PyQt5.QtWidgets import QApplication, QWidget; app = QApplication([])"

        # Look at what we have and fail early if there is some library conflict
        - run:
            name: Check installation
            command: |
               which python
               QT_DEBUG_PLUGINS=1 mne sys_info
               python -c "import numpy; numpy.show_config()"
               LIBGL_DEBUG=verbose python -c "import pyvistaqt; pyvistaqt.BackgroundPlotter(show=True)"
               python -c "import mne; mne.set_config('MNE_USE_CUDA', 'false')"  # this is needed for the config tutorial
               python -c "import mne; mne.set_config('MNE_LOGGING_LEVEL', 'info')"
               python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"

        # Figure out if we should run a full, pattern, or noplot version
        - run:
            name: Get data
            command: |
              python setup.py develop --user
              mkdir -p ~/mne_data
              touch pattern.txt;
              ./tools/circleci_download.sh

        - run:
            name: Get data (again)
            when: on_fail
            command: |
              ./tools/circleci_download.sh

        - run:
            name: Verify build type
            command: |
              echo "PATTERN=$(cat pattern.txt)"
              echo "BUILD=$(cat build.txt)"
              ls -al ~/mne_data;

        # Run doctest (if it's full or front) before building the docs
        - run:
            name: make test-doc
            command: |
              if [[ $(cat gitlog.txt) == *"[circle front]"* ]] || [[ $(cat build.txt) == "html_dev-memory" ]] || [[ $(cat build.txt) == "html_stable-memory" ]]; then
                make test-doc;
                mkdir -p doc/_build/test-results/test-doc;
                cp junit-results.xml doc/_build/test-results/test-doc/junit.xml;
              fi;
        # Build docs
        - run:
            name: make html
            command: |
              cd doc;
              PATTERN=$(cat ../pattern.txt) make $(cat ../build.txt);
        - run:
            name: Show profiling output
            when: always
            command: |
              if compgen -G "doc/*.dat" > /dev/null; then
                mkdir -p doc/generated
                mprof plot doc/*.dat --output doc/generated/memory.png
              else
                echo "No profile data found in doc/"
              fi
        - run:
            name: Sanity check system state
            command: |
              python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"

        # Reduce upload time of artifacts we will (almost) never look at
        - run:
            name: Reduce artifact upload time
            command: |
              if grep -q html_dev-pattern-memory build.txt || grep -q html_dev-noplot build.txt; then
                tar czf doc/_build/html/_downloads.tgz doc/_build/html/_downloads
                rm -Rf doc/_build/html/_downloads
                rm -f doc/auto_*/*/*.pickle
                rm -f doc/auto_*/*/*.codeobj
                rm -f doc/auto_*/*/*.md5
                rm -f doc/auto_*/*/*.py
                rm -f doc/auto_*/*/*.ipynb
                rm -f doc/generated/*.examples
              fi

        # Save the JUnit file
        - store_test_results:
            path: doc/_build/test-results
        - store_artifacts:
            path: doc/_build/test-results
            destination: test-results
        # Save the SG RST
        - store_artifacts:
            path: doc/auto_examples
            destination: auto_examples
        - store_artifacts:
            path: doc/auto_tutorials
            destination: auto_tutorials
        - store_artifacts:
            path: doc/generated
            destination: generated
        # Save the HTML
        - store_artifacts:
            path: doc/_build/html/
            destination: dev
        - store_artifacts:
            path: doc/_build/html_stable/
            destination: stable
        - persist_to_workspace:
            root: doc/_build
            paths:
              - html
              - html_stable

        # Keep these separate, maybe better in terms of size limitations (?)
        - save_cache:
            key: data-cache-0
            paths:
              - ~/.mne
              - ~/mne_data/mTRF_1.5
        - save_cache:
            key: data-cache-1
            paths:
              - ~/mne_data/HF_SEF
              - ~/mne_data/MEGSIM
        - save_cache:
            key: data-cache-2
            paths:
              - ~/mne_data/MNE-brainstorm-data
              - ~/mne_data/MNE-eegbci-data
        - save_cache:
            key: data-cache-3
            paths:
              - ~/mne_data/MNE-fieldtrip_cmc-data
              - ~/mne_data/MNE-kiloword-data
        - save_cache:
            key: data-cache-4
            paths:
              - ~/mne_data/MNE-misc-data
              - ~/mne_data/MNE-multimodal-data
        - save_cache:
            key: data-cache-5
            paths:
              - ~/mne_data/MNE-OPM-data
              - ~/mne_data/MNE-phantom-4DBTi
        - save_cache:
            key: data-cache-6
            paths:
              - ~/mne_data/MNE-sample-data
              - ~/mne_data/MNE-somato-data
        - save_cache:
            key: data-cache-7
            paths:
              - ~/mne_data/MNE-spm-face
              - ~/mne_data/MNE-testing-ata
        - save_cache:
            key: data-cache-8
            paths:
              - ~/mne_data/MNE-visual_92_categories-data
              - ~/mne_data/MNE-limo-data


    linkcheck:
      # there are a few files excluded from this for expediency, see Makefile
      docker:
        - image: circleci/python:3.6-jessie
      steps:
        - checkout
        - run:
            name: pip install dependencies
            command: |
               set -e;
               python -m pip install --user --progress-bar off numpy scipy matplotlib pillow
               python -m pip install --user --progress-bar off -r requirements_doc.txt
               python -m pip install --user -e .
        - run:
            name: make linkcheck
            command: |
              set -e
              cd doc
              PATH=~/.local/bin:$PATH make linkcheck
        - run:
            name: make linkcheck-grep
            when: always
            command: |
              cd doc
              make linkcheck-grep
        - store_artifacts:
            path: doc/_build/linkcheck
            destination: linkcheck


    deploy:
      docker:
        - image: circleci/python:3.6-jessie
      steps:
        - attach_workspace:
            at: /tmp/build
        - restore_cache:
            keys:
              - website-cache
        - run:
            name: Fetch docs
            command: |
              set -e
              mkdir -p ~/.ssh
              echo -e "Host *\nStrictHostKeyChecking no" > ~/.ssh/config
              chmod og= ~/.ssh/config
              if [ ! -d ~/mne-tools.github.io ]; then
                git clone git@github.com:/mne-tools/mne-tools.github.io.git ~/mne-tools.github.io --depth=1
              fi
        - run:
            name: Deploy docs
            command: |
              set -e;
              if [ "${CIRCLE_BRANCH}" == "master" ] || [ "${CIRCLE_BRANCH}" == "maint/0.22" ]; then
                git config --global user.email "circle@mne.com";
                git config --global user.name "Circle CI";
                cd ~/mne-tools.github.io;
                git checkout master
                git remote -v
                git fetch origin
                git reset --hard origin/master
                git clean -xdf
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  echo "Deploying dev docs for ${CIRCLE_BRANCH}.";
                  rm -Rf dev;
                  cp -a /tmp/build/html dev;
                  git add -A;
                  git commit -m "CircleCI update of dev docs (${CIRCLE_BUILD_NUM}).";
                else
                  echo "Deploying stable docs for ${CIRCLE_BRANCH}.";
                  rm -Rf stable;
                  cp -a /tmp/build/html_stable stable;
                  git add -A;
                  git commit -m "CircleCI update of stable docs (${CIRCLE_BUILD_NUM}).";
                fi;
                git push origin master;
              else
                echo "No deployment (build: ${CIRCLE_BRANCH}).";
              fi
        - save_cache:
            key: website-cache
            paths:
              - ~/mne_data/MNE-visual_92_categories-data


    interactive_test:
      docker:
        - image: circleci/python:3.8.5-buster
      steps:
        - checkout
        - run:
            name: Get Python running
            command: |
              python -m pip install --user --upgrade --progress-bar off pip setuptools
              python -m pip install -i "https://pypi.anaconda.org/scipy-wheels-nightly/simple" --pre numpy
              python -m pip install -f "https://7933911d6844c6c53a7d-47bd50c35cd79bd838daf386af554a83.ssl.cf2.rackcdn.com" scipy pandas scikit-learn matplotlib h5py Pillow
              python -m pip install -r requirements_testing.txt
              python -m pip install --user -e .

        # Look at what we have and fail early if there is some library conflict
        - run:
            name: Check installation
            command: |
              which python
              python -c "import numpy; numpy.show_config()"
              python -c "from numpy._pytesttester import _show_numpy_info; _show_numpy_info()"

        # Figure out if we should run a full, pattern, or noplot version
        - run:
            name: Get data
            command: |
              python -c "import mne; mne.datasets.testing.data_path(verbose=True)"

        # Run doctest (if it's full or front) before building the docs
        - run:
            name: pytest
            command: |
              pytest -m "not ultraslowtest" mne -xv

workflows:
  version: 2

  default:
    jobs:
      - build_docs
      - deploy:
          requires:
            - build_docs
          filters:
            branches:
              only:
                - master
                - maint/0.22
      # interactive_test

  weekly:
    jobs:
      - linkcheck
    triggers:
      - schedule:
          # "At 00:00 on Sunday" should be often enough
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
